pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "orenharari33/jenkins_push_image"
        DOCKER_TAG = "latest"
        DOCKERHUB_CREDENTIALS = credentials('orenharari33-dockerhub')
        DOCKER_HOST = 'unix:///var/run/docker.sock'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Environment Diagnostics') {
            steps {
                sh 'echo "Workspace: $WORKSPACE"'
                sh 'echo "Jenkins Home: $JENKINS_HOME"'
                sh 'whoami'
                sh 'id'
                sh 'ls -l /var/run/docker.sock || echo "Docker socket not found at /var/run/docker.sock"'
            }
        }

        stage('Check Docker') {
            steps {
                script {
                    def dockerCheck = sh(script: 'docker version', returnStatus: true)
                    if (dockerCheck != 0) {
                        error "Unable to connect to Docker. Ensure the Docker socket is mounted and accessible."
                    } else {
                        sh 'docker version'
                        sh 'docker info'
                    }
                }
            }
        }

        stage('Debug Path') {
            steps {
                sh 'pwd'
                sh 'ls -la'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'pwd'
                    sh 'ls -la'
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
    }

    post {
        always {
            sh "docker logout"
        }
        success {
            echo 'Successfully built and pushed Docker image'
        }
        failure {
            echo 'Failed to build or push Docker image'
        }
    }
}
