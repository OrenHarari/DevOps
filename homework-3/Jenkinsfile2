pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "orenharari33/jenkins_push_image"
        DOCKER_TAG = "latest"
        DOCKERHUB_CREDENTIALS = credentials('orenharari33-dockerhub') // You need to set up these credentials in Jenkins
        GITHUB_CREDENTIALS = credentials('orenharari33-dockerhub') // You need to set up these credentials in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}:${DOCKER_TAG}")
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Replace this with your actual test commands
                    sh 'echo "Running tests..."'
                    // Example: sh 'docker run --rm ${DOCKER_IMAGE}:${DOCKER_TAG} npm test'
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        docker.image("${DOCKER_IMAGE}:${DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Replace this with your actual deployment commands
                    sh 'echo "Deploying to production..."'
                    // Example: sh 'kubectl apply -f kubernetes-manifests/'
                }
            }
        }

        stage('Clean Up') {
            steps {
                script {
                    sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline succeeded! The image has been built, tested, pushed, and deployed.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}
